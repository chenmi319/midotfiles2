# 让 tmux 与终端协商扩展按键（含 Shift/Alt/Ctrl 修饰的功能键、Enter 等）
##### 版本与终端特性（安全守卫）
set -g xterm-keys on
# 3.2+ 才有 extended-keys
if-shell 'tmux -V | grep -qE "tmux 3\.[2-9]|tmux [4-9]"' \
  'set -g extended-keys on'
# 3.3+ 才支持 extkeys 终端能力声明与 allow-passthrough
if-shell 'tmux -V | grep -qE "tmux 3\.[3-9]|tmux [4-9]"' \
  'set -as terminal-features ",xterm*:extkeys"; set -g allow-passthrough on'

##### TERM 与 terminfo 说明（若缺就安装）
# 建议用 screen-256color（兼容性更好）
set -g default-terminal "screen-256color"
# 若你的系统还没有该 terminfo，可用以下命令安装（按照你的系统路径调整）：
#   infocmp -x tmux-256color >/dev/null 2>&1 || \
#   tic -x -o ~/.terminfo /usr/share/terminfo/t/tmux-256color

##### 状态/体验优化
set -g focus-events on
set -g renumber-windows off
set -g repeat-time 300
# 若 Alt 组合键偶有问题，可改为 10
set -sg escape-time 0

##### 历史与响铃
set -g history-limit 20000
set -g bell-action any

##### 标题
set -g set-titles on
set -g set-titles-string '#S'

##### 索引从 1 开始
set -g base-index 1
setw -g pane-base-index 1

##### Vim 感知的 pane 切换（保留你的逻辑）
set -g status-keys vi
setw -g mode-keys vi

set -g mouse on

# 更稳妥：确保不会被其他绑定抢占
unbind -n C-j
unbind -n C-k
unbind -n C-h
unbind -n C-l
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|/)(g?(view|n?vim?x?)(diff)?|opencode?|node?|k9s?)([0-9._-]*)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"

##### 同步输入开关
bind e setw synchronize-panes on
bind E setw synchronize-panes off

##### 新建/分屏默认在当前目录
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"
bind -n M-c new-window -c "#{pane_current_path}"
bind -n M-h previous-window
bind -n M-l next-window

##### 复制与剪贴板（统一：OSC52 优先 + 自动探测）
# 1) 内置剪贴板（含 OSC52）：
set -s set-clipboard on
# 2) 自动探测系统命令并为 "y" 绑定 copy-pipe-and-cancel
if-shell 'command -v pbcopy >/dev/null' \
  'bind -T copy-mode-vi y send -X copy-pipe-and-cancel "pbcopy"' \
  'if-shell "command -v xclip >/dev/null" \
     "bind -T copy-mode-vi y send -X copy-pipe-and-cancel \"xclip -selection clipboard\"" \
     "if-shell \"command -v xsel >/dev/null\" \
        \"bind -T copy-mode-vi y send -X copy-pipe-and-cancel \\\"xsel --clipboard --input\\\"\" \
        \"bind -T copy-mode-vi y send -X copy-selection-and-cancel\""'


# # 鼠标选择结束即复制（复用同一逻辑）
# unbind -T copy-mode-vi MouseDragEnd1Pane
# if-shell 'command -v pbcopy >/dev/null' \
#   'bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "pbcopy"' \
#   'if-shell "command -v xclip >/dev/null" \
#      "bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel \"xclip -selection clipboard\"" \
#      "if-shell \"command -v xsel >/dev/null\" \
#         \"bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel \\\"xsel --clipboard --input\\\"\" \
#         \"bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-selection-and-cancel\""'
bind -T copy-mode-vi MouseDragEnd1Pane send -X

##### 粘贴绑定（可选：避免覆盖 C-c/C-v 的传统语义）
# 若你确实想用 tmux 在前台粘贴缓冲区，可用：
# bind -T prefix p paste-buffer

##### man 页面
bind m command-prompt -p "man page:" "split-window -h 'exec man %%'"
bind M command-prompt -p "Man page:" "new-window -n 'man %1' 'exec man %1'"

##### 重新加载配置
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

##### 旧版本遗留清理
# 仅 2.1 时代的临时项；现代 tmux 建议去掉：
# set -g assume-paste-time 0

##### TPM 与主题
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @resurrect-capture-pane-contents 'on'
set -g @continuum-restore 'on'

set -g @plugin 'jimeh/tmux-themepack'
set -g @themepack 'powerline/double/cyan'

run '~/.tmux/plugins/tpm/tpm'

##### macOS 兼容（仅在存在时启用）
if-shell "command -v reattach-to-user-namespace > /dev/null" \
  "set -g default-command 'reattach-to-user-namespace -l $SHELL || $SHELL'"
